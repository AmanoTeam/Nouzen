name: Build

on:
  push:
    branches:
        - '**'
    paths:
        - '**.c'
        - '**.h'
        - '**.sh'
        - 'CMakeLists.txt'
        - 'submodules/**'
        - '.github/workflows/build.yml'        

permissions:
  contents: write

jobs:
  build:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
      with:
        submodules: true
    - name: Free up some space
      run: |
        curl 'https://raw.githubusercontent.com/AmanoTeam/gha-free-space/refs/heads/master/main.sh' -sSf | bash 
    - name: Install required dependencies
      run: |
        sudo apt-get update
        sudo apt-get install build-essential || true
    - name: Setup OBGGCC cross-compiler 
      run: |
        declare -r OBGGCC_TAG="$(jq --raw-output '.tag_name' <<< "$(curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --url 'https://api.github.com/repos/AmanoTeam/obggcc/releases/latest')")"
        declare -r OBGGCC_TARBALL='/tmp/toolchain.tar.xz'
        declare -r OBGGCC_URL="https://github.com/AmanoTeam/obggcc/releases/download/${OBGGCC_TAG}/x86_64-unknown-linux-gnu.tar.xz"
        
        curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --location --url "${OBGGCC_URL}" --output "${OBGGCC_TARBALL}"
        tar --directory="$(dirname "${OBGGCC_TARBALL}")" --extract --file="${OBGGCC_TARBALL}"
        
        echo 'OBGGCC_HOME=/tmp/obggcc' >> "${GITHUB_ENV}"
        echo '/tmp/obggcc/bin' >> "${GITHUB_PATH}"
    - name: Setup Pino cross-compiler 
      run: |
        declare -r PINO_TAG="$(jq --raw-output '.tag_name' <<< "$(curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --url 'https://api.github.com/repos/AmanoTeam/Pino/releases/latest')")"
        declare -r PINO_TARBALL='/tmp/toolchain.tar.xz'
        declare -r PINO_URL="https://github.com/AmanoTeam/Pino/releases/download/${PINO_TAG}/x86_64-unknown-linux-gnu.tar.xz"
        
        curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --location --url "${PINO_URL}" --output "${PINO_TARBALL}"
        tar --directory="$(dirname "${PINO_TARBALL}")" --extract --file="${PINO_TARBALL}"
        
        echo 'PINO_HOME=/tmp/pino' >> "${GITHUB_ENV}"
        echo '/tmp/pino/bin' >> "${GITHUB_PATH}"
        
        sudo sed --in-place '/CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG/d' '/usr/local/share/cmake-'*'/Modules/Platform/Android.cmake'
    - name: Setup Linux musl cross-compiler
      run: |
        declare -r RAIDEN_TAG="$(jq --raw-output '.tag_name' <<< "$(curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --url 'https://api.github.com/repos/AmanoTeam/Raiden/releases/latest')")"
        declare -r RAIDEN_TARBALL='/tmp/toolchain.tar.xz'
        declare -r RAIDEN_URL="https://github.com/AmanoTeam/Raiden/releases/download/${RAIDEN_TAG}/x86_64-unknown-linux-gnu.tar.xz"
        
        curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --location --url "${RAIDEN_URL}" --output "${RAIDEN_TARBALL}"
        tar --directory="$(dirname "${RAIDEN_TARBALL}")" --extract --file="${RAIDEN_TARBALL}"
        
        echo 'RAIDEN_HOME=/tmp/raiden' >> "${GITHUB_ENV}"
        echo '/tmp/raiden/bin' >> "${GITHUB_PATH}"
    - name: Setup SerenityOS cross-compiler
      run: |
        declare -r SENNA_TAG="$(jq --raw-output '.tag_name' <<< "$(curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --url 'https://api.github.com/repos/AmanoTeam/Senna/releases/latest')")"
        declare -r SENNA_TARBALL='/tmp/toolchain.tar.xz'
        declare -r SENNA_URL="https://github.com/AmanoTeam/Senna/releases/download/${SENNA_TAG}/x86_64-unknown-linux-gnu.tar.xz"
        
        curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --location --url "${SENNA_URL}" --output "${SENNA_TARBALL}"
        tar --directory="$(dirname "${SENNA_TARBALL}")" --extract --file="${SENNA_TARBALL}"
        
        echo 'SENNA_HOME=/tmp/senna' >> "${GITHUB_ENV}"
        echo '/tmp/senna/bin' >> "${GITHUB_PATH}"
    - name: Setup Haiku cross-compiler
      run: |
        declare -r SIL_TAG="$(jq --raw-output '.tag_name' <<< "$(curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --url 'https://api.github.com/repos/AmanoTeam/Sil/releases/latest')")"
        declare -r SIL_TARBALL='/tmp/toolchain.tar.xz'
        declare -r SIL_URL="https://github.com/AmanoTeam/Sil/releases/download/${SIL_TAG}/x86_64-unknown-linux-gnu.tar.xz"
        
        curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --location --url "${SIL_URL}" --output "${SIL_TARBALL}"
        tar --directory="$(dirname "${SIL_TARBALL}")" --extract --file="${SIL_TARBALL}"
        
        echo 'SIL_HOME=/tmp/sil' >> "${GITHUB_ENV}"
        echo '/tmp/sil/bin' >> "${GITHUB_PATH}"
    - name: Setup NetBSD cross-compiler
      run: |
        declare -r DAKINI_TAG="$(jq --raw-output '.tag_name' <<< "$(curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --url 'https://api.github.com/repos/AmanoTeam/Dakini/releases/latest')")"
        declare -r DAKINI_TARBALL='/tmp/toolchain.tar.xz'
        declare -r DAKINI_URL="https://github.com/AmanoTeam/Dakini/releases/download/${DAKINI_TAG}/x86_64-unknown-linux-gnu.tar.xz"
        
        curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --location --url "${DAKINI_URL}" --output "${DAKINI_TARBALL}"
        tar --directory="$(dirname "${DAKINI_TARBALL}")" --extract --file="${DAKINI_TARBALL}"
        
        echo 'DAKINI_HOME=/tmp/dakini' >> "${GITHUB_ENV}"
        echo '/tmp/dakini/bin' >> "${GITHUB_PATH}"
    - name: Setup FreeBSD cross-compiler
      run: |
        declare -r LOKI_TAG="$(jq --raw-output '.tag_name' <<< "$(curl  --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --url 'https://api.github.com/repos/AmanoTeam/Loki/releases/latest')")"
        declare -r LOKI_TARBALL='/tmp/toolchain.tar.xz'
        declare -r LOKI_URL="https://github.com/AmanoTeam/Loki/releases/download/${LOKI_TAG}/x86_64-unknown-linux-gnu.tar.xz"
        
        curl --silent --connect-timeout '10' --retry '15' --retry-all-errors --fail --location --url "${LOKI_URL}" --output "${LOKI_TARBALL}"
        tar --directory="$(dirname "${LOKI_TARBALL}")" --extract --file="${LOKI_TARBALL}"
        
        echo 'LOKI_HOME=/tmp/loki' >> "${GITHUB_ENV}"
        echo '/tmp/loki/bin' >> "${GITHUB_PATH}"
    - name: Setup DragonFly cross-compiler
      run: |
        declare -r DRAGONFLY_CROSS_TAG="$(jq --raw-output '.tag_name' <<< "$(curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --url 'https://api.github.com/repos/AmanoTeam/Venti/releases/latest')")"
        declare -r DRAGONFLY_CROSS_TARBALL='/tmp/toolchain.tar.xz'
        declare -r DRAGONFLY_CROSS_URL="https://github.com/AmanoTeam/dr4g0nflybsdcr0ss/releases/download/${DRAGONFLY_CROSS_TAG}/x86_64-unknown-linux-gnu.tar.xz"
        
        curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --location --url "${DRAGONFLY_CROSS_URL}" --output "${DRAGONFLY_CROSS_TARBALL}"
        tar --directory="$(dirname "${DRAGONFLY_CROSS_TARBALL}")" --extract --file="${DRAGONFLY_CROSS_TARBALL}"
        
        echo 'VENTI_HOME=/tmp/venti' >> "${GITHUB_ENV}"
        echo '/tmp/venti/bin' >> "${GITHUB_PATH}"
    - name: Setup OpenBSD cross-compiler
      run: |
        declare -r ATAR_TAG="$(jq --raw-output '.tag_name' <<< "$(curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --url 'https://api.github.com/repos/AmanoTeam/Atar/releases/latest')")"
        declare -r ATAR_TARBALL='/tmp/toolchain.tar.xz'
        declare -r ATAR_URL="https://github.com/AmanoTeam/Atar/releases/download/${ATAR_TAG}/x86_64-unknown-linux-gnu.tar.xz"
        
        curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --location --url "${ATAR_URL}" --output "${ATAR_TARBALL}"
        tar --directory="$(dirname "${ATAR_TARBALL}")" --extract --file="${ATAR_TARBALL}"
        
        echo 'ATAR_HOME=/tmp/atar' >> "${GITHUB_ENV}"
        echo '/tmp/atar/bin' >> "${GITHUB_PATH}"
    - name: Setup Windows cross-compiler
      run: |
        declare -r LLVM_MINGW_TAG="$(jq --raw-output '.tag_name' <<< "$(curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --url 'https://api.github.com/repos/AmanoTeam/LLVMMinGW-Builds/releases/latest')")"
        declare -r LLVM_MINGW_TARBALL='/tmp/toolchain.tar.xz'
        declare -r LLVM_MINGW_URL="https://github.com/AmanoTeam/LLVMMinGW-Builds/releases/download/${LLVM_MINGW_TAG}/x86_64-unknown-linux-gnu.tar.xz"
        
        curl --connect-timeout '10' --retry '15' --retry-all-errors --fail --silent --location --url "${LLVM_MINGW_URL}" --output "${LLVM_MINGW_TARBALL}"
        tar --directory="$(dirname "${LLVM_MINGW_TARBALL}")" --extract --file="${LLVM_MINGW_TARBALL}"
        
        echo 'LLVM_MINGW_HOME=/tmp/llvm-mingw' >> "${GITHUB_ENV}"
        echo '/tmp/llvm-mingw/bin' >> "${GITHUB_PATH}"
    - name: Setup symbolic links
      run: |
        ln --symbolic '/tmp/'*'/usr/local/share/'*'/'*'/'* '/tmp'
    - name: Build with CMake
      run: |
        declare -ra targets=(
            # OpenBSD
            aarch64-unknown-openbsd
            arm-unknown-openbsd
            x86_64-unknown-openbsd
            i386-unknown-openbsd
            
            # Android
            x86_64-unknown-linux-android
            i686-unknown-linux-android
            arm-unknown-linux-androideabi
            aarch64-unknown-linux-android
            
            # Linux (glibc)
            aarch64-unknown-linux-gnu2.19
            arm-unknown-linux-gnueabihf2.13
            x86_64-unknown-linux-gnu2.7
            i386-unknown-linux-gnu2.7
            
            # Linux (musl)
            aarch64-unknown-linux-musl
            armv7l-unknown-linux-musleabihf
            i386-unknown-linux-musl
            x86_64-unknown-linux-musl
            
            # FreeBSD
            x86_64-unknown-freebsd
            i386-unknown-freebsd
            aarch64-unknown-freebsd
            
            # NetBSD
            x86_64-unknown-netbsd
            i386-unknown-netbsdelf
            
            # DragonFly BSD
            x86_64-unknown-dragonfly
            
            # SerenityOS
            # riscv64-unknown-serenity
            # x86_64-unknown-serenity
            # aarch64-unknown-serenity
            
            # Haiku
            x86_64-unknown-haiku
            i586-unknown-haiku
            
            # Windows
            # aarch64-w64-mingw32
            # armv7-w64-mingw32
            # i686-w64-mingw32
            # x86_64-w64-mingw32
        )
        
        declare -r source_directory="${PWD}"
        
        declare -r output_directory="$(realpath './output')"
        mkdir --parent "${output_directory}"
        
        for target in "${targets[@]}"; do
            (
                declare toolchain_file="/tmp/${target}.cmake"
                declare extra_c_flags=''
                
                echo "toolchain -> ${toolchain_file}"
                
                target="${target%2.*}"
                
                declare build_directory="${PWD}/${target}-build"
                declare install_prefix="${build_directory}/${target}"
                
                if [ "${target}" = 'aarch64-unknown-linux-gnu' ]; then
                    extra_c_flags+='-DHWCAP_CRC32=128'
                fi
                
                cmake \
                    -B "${build_directory}" \
                    -S "${source_directory}" \
                    -DNOUZEN_ENABLE_LTO='ON' \
                    -DCMAKE_C_FLAGS="${extra_c_flags}" \
                    -DCMAKE_TOOLCHAIN_FILE="${toolchain_file}" \
                    -DCMAKE_INSTALL_PREFIX="${install_prefix}" \
                    -DCMAKE_BUILD_TYPE='Release' 1>/dev/null
                
                echo "- Building project"
                
                cmake --build "${build_directory}"  -- --jobs='1'
                
                echo "- Installing project"
                
                cmake --install "${build_directory}" --strip
                
                # Bundle both libstdc++ and libgcc within host tools
                (
                    source "/tmp/${target}.sh"
                    
                    [ -d "${install_prefix}/lib" ] || mkdir "${install_prefix}/lib"
                    
                    declare name=$(realpath $("${CC}" --print-file-name='libstdc++.so'))
                    declare soname=$("${READELF}" -d "${name}" | grep 'SONAME' | sed --regexp-extended 's/.+\[(.+)\]/\1/g')
                    
                    cp "${name}" "${install_prefix}/lib/${soname}"
                    
                    declare name=$(realpath $("${CC}" --print-file-name='libgcc_s.so.1'))
                    declare soname=$("${READELF}" -d "${name}" | grep 'SONAME' | sed --regexp-extended 's/.+\[(.+)\]/\1/g')
                    
                    cp "${name}" "${install_prefix}/lib/${soname}"
                )
                
                echo "- Creating compressed archive"
                
                pushd "$(dirname "${install_prefix}")"
                
                if [[ "${target}" == *'mingw32' ]]; then
                    zip --recurse-paths -9 "${output_directory}/${target}.zip" "${target}" 1>/dev/null
                else
                    tar --create --file=- "${target}" |  xz --extreme --threads='0' --compress -9 > "${output_directory}/${target}.tar.xz"
                fi
                
                rm --force --recursive "${build_directory}"
                
            )
        done
    - name: Upload artifact
      uses: actions/upload-artifact@main
      with:
        path: ./output
    - name: Get tag name for release
      if: startsWith(github.event.head_commit.message, 'Bump version')
      run: echo "VERSION_TAG=${COMMIT_MESSAGE/* }" >> "${GITHUB_ENV}"
      env:
        COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
    - name: Create release
      if: startsWith(github.event.head_commit.message, 'Bump version')
      uses: softprops/action-gh-release@master
      with:
        tag_name: v${{ env.VERSION_TAG }}
        name: Nouzen v${{ env.VERSION_TAG }}
        files: ./output/*
        draft: false
        prerelease: false
        fail_on_unmatched_files: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
